Tutorial: Learning Merb

----- Philosophy

* Main focus these days: fast, lightweight, powerful.

* Modular. For example, view helpers are not needed for a web service, so you
  should be able to pull those out.
  
* Agnostic. merb-core is agnostic, but by default you get DataMapper for ORM,
  RSpec for testing/specs.
  
* Gave a quick look at a model and controller.

----- App, Misc

* `merb-gen core` to build a core app

* Architecture. Using resources.

* DataMapper
  - Easy to write DataMapper datastore adapters. For example: Salesforce 
    adapter, YouTube adapter (represents YouTube queries).
  - Crazy migrations (??)
  - DataMapper auto upgrade works in production.
  
* action-args uses ParseTree on boot up. Interested to dig into further.

* The generated code represents best Merb practices. Should follow the styles 
  and conventions of generated code.
  
* Careful with automigrate rake task. Don't run on production.

* Lots of questions about migrations that I'm not grokking at the moment, but
  these are essentially DataMapper questions.
  
* Not currently a --pretend like option for migration. It's on the way.

* View file names are the same as Rails. It works.

* Slices. Mini-applications that can be distributed as gems.
  - MerbAuth is a good example of a slice; it's fairly complex.

